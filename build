#! /usr/local/bin/node

const fs    = require('fs'),
      util  = require('util'),
      path  = require('path'),
      exec  = require('child_process').exec

/** TYPES **/

const Types = ( function () {
    return {
        JAVASCRIPT : function () { return 'js'  },
        OPA        : function () { return 'opa' }
    }
} () )

/** FUNCTIONS **/

const exec_each_file = function (type, fn, path) {
    const file_ext = '\.' + type + '$'
    const find_then_grep = 'find ' + path + ' | grep ' + file_ext

    const apply_each_file = function (err, stdout, stderr) {
        const file_fn = function (file) {
            if (file) {
                util.puts('watching ' + file);
                fs.watchFile(file, function (curr, prev) {
                    fn(file, fs.statSync(file))
                })
            } else { return }
        }

        if ( err ) { return } else { stdout.split('\n').forEach(file_fn) }
    }

    exec(find_then_grep, apply_each_file)
}

const make_and_notify = function (fname, fstat) {
  const handler = function(err, stdout, stderr) {
    util.puts('running loop')
    if ( err ) {
        util.puts(stderr)
        exec('growlnotify -name "Compile" -m "Compiler found errors" Failure')
    } else {
        util.puts('No errors found.')
        exec('growlnotify -name "Compile" -m "Compiler found no errors" Success')
        exec('/usr/local/bin/ctags -f ' + process.cwd() + '/tags .')
    }
  }

  util.puts('detected event on file [' + fname + ']')

  if ( !fstat.isDirectory() ) {
    exec('make', handler)
  }
}

const make_opa = exec_each_file.bind(null, Types.OPA(), make_and_notify)


/** MAIN **/

make_opa(process.cwd())
util.puts('Starting to watch ' + process.cwd())
